package com.eastdawn.action;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONObject;

import org.apache.struts2.ServletActionContext;

import com.eastdawn.common.BindSession;
import com.eastdawn.common.PageUtil;
import com.eastdawn.dao.LogsDao;
import com.eastdawn.dao.UserDao;
import com.eastdawn.util.DESHelper;
import com.eastdawn.bo.UserBO;
import com.eastdawn.common.PageAction;
import com.eastdawn.po.Logs;
import com.eastdawn.po.ServiceGl;
import com.eastdawn.po.User;
import com.eastdawn.util.StaticName;

@SuppressWarnings("serial")
public class UserLogAction extends PageAction {
	
	private Long userId;//用户ID
	private String logName;//用户登录名
	private String logPwd;//密码
	private String imageCode;//验证码
	private String department;//部门
	private String cName;//中文名
	private String email;//邮箱
	private String status;//用户状态(1状态正常、2注销)
	private Date addTime;//注册日期
	private String level;//用户权限（1普通用户、2管理员）
	private Date logTime;//最新登录时间
	private User user;
	private String checked;
	
	private UserDao userDao;
	private UserBO userBO;
	private String password;
	private List userList;
	private LogsDao logsDao;
	private String signs;//注册标记
	
	private Long statr;
	private Long totalNum;
	//private BindSession bl;
	public String logon() throws Exception {
		HttpSession session = ServletActionContext.getRequest().getSession();
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		
		Map<String, Object> queryMap = new HashMap<String, Object>();
		List<User> userList = null;
		Date logdate = new Date();
		try {
			System.out.println(DESHelper.encode(this.logPwd.trim())+"----"+this.logPwd.trim());
			if (this.logName != null && !this.logName.trim().equals("")) {
				queryMap.put("logName", this.logName.trim());
				queryMap.put("status", 1);
			}
			if (this.logPwd != null && !this.logPwd.trim().equals("")) {
				queryMap.put("logPwd", DESHelper.encode(this.logPwd.trim()));
			}
			userList = this.userDao.queryUserByPage(queryMap);
			
			System.out.println(userList.size());
			if(userList.size() != 0){
				User user = new User();
				user.setUserId(userList.get(0).getUserId());
				user.setLogTime(logdate);
				userBO.updateLogTimeById(user);
				session.setAttribute(StaticName.session_msg, null);
				session.setAttribute(StaticName.session_user, userList.get(0));
				BindSession bl=new BindSession(userList.get(0).getLogName());
				System.out.println(userList.get(0).getLogName());
				session.setAttribute(userList.get(0).getLogName(), bl);
			}

		} catch (Exception e) {
			e.printStackTrace();
			response.setCharacterEncoding("UTF-8"); 
			response.getWriter().write("1");
			return StaticName.logon_user;
		}
		
		if (userList == null || userList.size() != 1) {
			response.setCharacterEncoding("UTF-8"); 
			response.getWriter().write("1");
			return null;
		}else{
			response.setCharacterEncoding("UTF-8"); 
			response.getWriter().write("2");
			logAdd("用户登录");
			return null;
		}
	}
	
	public void logout() throws Exception {
		logAdd("用户退出");
		HttpSession session = ServletActionContext.getRequest().getSession();
		HttpServletRequest request = ServletActionContext.getRequest();
		User user = (User) session.getAttribute(StaticName.session_user);//从session中去值是个对象
		//清空最新登录时间
		user.setUserId(this.userId);
		user.setLogTime(null);
		userBO.updateLogTimeById(user);
		
		HttpServletResponse response = ServletActionContext.getResponse();
		session.setAttribute(StaticName.session_msg, StaticName.logout_msg);
		session.setAttribute(StaticName.session_user, null);
		response.setCharacterEncoding("UTF-8"); 
		response.getWriter().write("1");
		session.removeAttribute(user.getLogName());
	}
	
	public String getUserName() throws IOException {
		HttpSession session = ServletActionContext.getRequest().getSession();
		HttpServletResponse response = ServletActionContext.getResponse();
		String log = (String) session.getAttribute("logname");
		response.setCharacterEncoding("UTF-8"); 
		if(log == null){
			response.getWriter().write("1");
		}else{
			response.getWriter().write(log);
		}
		return null;
	}
	
	//用户名查询
	public String searchName() throws Exception {
		HttpServletResponse response = ServletActionContext.getResponse();
		Map queryMap = new HashMap();
		try {
			if(this.logName!=null && !this.logName.equals("")){
				queryMap.put("logName", this.logName);
			}else{
				queryMap.put("logName", "12BNcv3d");
			}
			userList=userDao.queryUserByPage(queryMap);
			System.out.println(userList.size()+"---"+userList);
			if (userList != null && userList.size()> 0) {
				response.setCharacterEncoding("UTF-8"); 
				response.getWriter().write("1");
			}else{
				System.out.println("用户名验证通过。");
			}
		} catch (Exception e) {
			// TODO: handle exceptio
			e.printStackTrace();
		}
		
		return null;
	}
	//添加用户 
	public String add() throws Exception {
		HttpServletResponse response = ServletActionContext.getResponse();
		Map queryMap = new HashMap();
		User user = new User();
		try {
			
			user.setLogName(this.logName);
			user.setLogPwd(DESHelper.encode(logPwd));	
			user.setDepartment(this.department);
			user.setCName(this.cName);
			user.setEmail(this.email);
			user.setStatus("1");
			if(this.signs != "0" && !this.signs.equals("0")){
				user.setLevel(this.level);
			}else{
				user.setLevel("1");
			}
			user.setAddTime(new Date());
			this.userId = userBO.add(user);
			response.setCharacterEncoding("UTF-8"); 
			response.getWriter().write("1");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	//类别添加方法
	public String beforeAdd() throws Exception {
	    return "add";
	}
	
	//查询用户
	public String execute() throws Exception {
		HttpServletRequest request = ServletActionContext.getRequest();	
		HttpServletResponse iResponse =ServletActionContext.getResponse();
		Map queryMap = new HashMap();
		try {
			if(this.userId != null && !this.userId.equals("")){
			    queryMap.put("userId", userId);
			}
			if(this.status != null && !this.status.equals("")){
			    queryMap.put("status", status);
			}
			totalNum = userDao.getUserCountByPage(queryMap);
			System.out.println(totalNum);
			if(statr == null){
				queryMap.put("numStart", 0);
			}else{
				queryMap.put("numStart", (statr-1)*10);
			}
			userList = userDao.queryUserByPage(queryMap);
			JSONObject object = new JSONObject();
	        object.put("num", totalNum); 
	        object.put("list", userList); 
	        System.out.println(totalNum+object.toString());
	        iResponse.setCharacterEncoding("utf-8");
	        iResponse.getWriter().write(object.toString());
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return null;	
	}
	
	
	//登录时间查询
	public String searchTime() throws Exception {
		HttpServletRequest request = ServletActionContext.getRequest();	
		HttpServletResponse iResponse =ServletActionContext.getResponse();
		Map queryMap = new HashMap();
		try {
			if(this.logName != null && !this.logName.equals("")){
			    queryMap.put("logName", logName);
			}
			if(statr == null){
				queryMap.put("numStart", 0);
			}else{
				queryMap.put("numStart", (statr-1)*10);
			}
			userList = userDao.queryUserByPage(queryMap);
			JSONObject object = new JSONObject();
	        object.put("list", userList); 
	        iResponse.setCharacterEncoding("utf-8");
	        iResponse.getWriter().write(object.toString());
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return null;	
	}

	//审核
	public void update() throws ParseException{
		HttpServletResponse response =ServletActionContext.getResponse();
		User user = new User();
		try{
			user.setUserId(getUserId());
			user.setLevel(this.level);
			userBO.updateLevelById(user);
			response.getWriter().write("1");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	//删除
	public String delete() throws Exception{
		System.out.println("Start to execute delete Action!");
		HttpServletRequest request = ServletActionContext.getRequest();
		try {
			userId = Long.parseLong(request.getParameter("userId"));
			this.deleteupdate();
			userDao.deleteById(userId);
		} catch (Exception e) {
			e.printStackTrace();
			super.addActionMessage("删除失败！");
		}
		this.execute();
		userId = null;
		return "search";
	}
	
	//注销
	public String deleteupdate() throws ParseException{
		HttpServletResponse response =ServletActionContext.getResponse();
		User user = new User();
		try{
			user.setUserId(getUserId());
			user.setStatus(getStatus());
			userDao.deleteUpdateById(user);
			response.getWriter().write("1");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	//审核
	public String updataLevel() throws ParseException{
		HttpServletResponse response =ServletActionContext.getResponse();
		User user = new User();
		try{
			user.setUserId(getUserId());
			user.setLevel("2");
			userDao.updateLevelById(user);
			response.getWriter().write("1");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public String detail() throws ParseException{
		Map queryMap = new HashMap();
		queryMap.put("userId", userId);
		List userList = userDao.queryUserByPage(queryMap);
		for(int i=0;i<userList.size();i++){
			user = (User)userList.get(0);
		}
		return "detail";
	}
	
	//修改方法
	public String edit() throws ParseException{
		HttpServletRequest request = ServletActionContext.getRequest();	
        Map queryMap = new HashMap();
        queryMap.put("userId", userId);
        userList = userDao.queryUserByPage(queryMap);
		for(int i=0;i<userList.size();i++){
			user = (User)userList.get(0);
		}
		return "edit";
	}
	
	//密码修改
	public String passwordUpdate() throws Exception{
		HttpServletResponse response =ServletActionContext.getResponse();
		HttpSession session = ServletActionContext.getRequest().getSession();
		User user = (User) session.getAttribute(StaticName.session_user);//从session中去值是个对象
		User editUser = new User();
		Map queryMap = new HashMap();
		System.out.println(DESHelper.encode(user.getLogPwd()));
		try {
			if(this.logPwd != null && !this.logPwd.equals("")){
				queryMap.put("logPwd", DESHelper.encode(this.logPwd));
				queryMap.put("userId", this.userId);
			}
			List userList = userDao.queryUserByPage(queryMap);
			if(userList.size() > 0){
				if(user.getLogPwd().equals(DESHelper.encode(this.password))){
					response.getWriter().write("3");
					return null;
				}else{
					editUser.setUserId(this.userId);
					editUser.setLogPwd(DESHelper.encode(this.password));
					userBO.passwordUpdateById(editUser);
					response.getWriter().write("1");
					return null;
				}
			}else{
				response.getWriter().write("2");
				return null;
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return null;
	}
	
	public String logAdd(String event) throws Exception {
		try {
			HttpSession session = ServletActionContext.getRequest().getSession();
			User user =(User)session.getAttribute(StaticName.session_user);
			Logs logs = new Logs();
			logs.setUserName(user.getLogName());
			logs.setUserId(user.getUserId());
			logs.setIp(ServletActionContext.getRequest().getRemoteAddr());
			logs.setEvent(event);
			logs.setTime(new Date());
			logs.setTimes(1);
			this.logsDao.add(logs);
		} catch (RuntimeException e) {
			e.printStackTrace();
		}
		return null;
	}

	public Long getUserId() {
		return userId;
	}

	public void setUserId(Long userId) {
		this.userId = userId;
	}

	public String getLogName() {
		return logName;
	}

	public void setLogName(String logName) {
		this.logName = logName;
	}

	public String getImageCode() {
		return imageCode;
	}

	public void setImageCode(String imageCode) {
		this.imageCode = imageCode;
	}

	public String getLogPwd() {
		return logPwd;
	}

	public void setLogPwd(String logPwd) {
		this.logPwd = logPwd;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public UserDao getUserDao() {
		return userDao;
	}

	public void setUserDao(UserDao userDao) {
		this.userDao = userDao;
	}

	public UserBO getUserBO() {
		return userBO;
	}

	public void setUserBO(UserBO userBO) {
		this.userBO = userBO;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public List getUserList() {
		return userList;
	}

	public void setUserList(List userList) {
		this.userList = userList;
	}

	
//	public LogsDao getLogsDao() {
//		return logsDao;
//	}
//
//	public void setLogsDao(LogsDao logsDao) {
//		this.logsDao = logsDao;
//	}

	public String getChecked() {
		return checked;
	}
	
	public void setChecked(String checked) {
		this.checked = checked;
	}

	public String getDepartment() {
		return department;
	}

	public void setDepartment(String department) {
		this.department = department;
	}

	public String getCName() {
		return cName;
	}

	public void setCName(String name) {
		cName = name;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public Date getAddTime() {
		return addTime;
	}

	public void setAddTime(Date addTime) {
		this.addTime = addTime;
	}

	public String getLevel() {
		return level;
	}

	public void setLevel(String level) {
		this.level = level;
	}

	public LogsDao getLogsDao() {
		return logsDao;
	}

	public void setLogsDao(LogsDao logsDao) {
		this.logsDao = logsDao;
	}

	public Long getStatr() {
		return statr;
	}

	public void setStatr(Long statr) {
		this.statr = statr;
	}

	public Long getTotalNum() {
		return totalNum;
	}

	public void setTotalNum(Long totalNum) {
		this.totalNum = totalNum;
	}

	public String getSigns() {
		return signs;
	}

	public void setSigns(String signs) {
		this.signs = signs;
	}

	public Date getLogTime() {
		return logTime;
	}

	public void setLogTime(Date logTime) {
		this.logTime = logTime;
	}

}